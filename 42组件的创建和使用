<!DOCTYPE html>
<html>
  <head>
    <title>组件的创建和使用</title>
    <script src="lib/vue.js"></script>
    <!-- 组件的使用分成三个步骤
        1.创建组件构造器  调用Vue.extend()方法
        2.注册组件  调用Vue.component()方法
        3.使用组件  在Vue实例的作用范围内使用组件

        注册组件步骤解析
        1.Vue.extend();
          调用Vue.extend()创建一个组件构造器;
          通常在创建组件构造器时，传入template代表自定义组件的模板;
          该模板就是在使用到组件的地方，要显示的HTML代码；
          事实上，这种写法在Vue2.x的文档中几乎已经看不到了，它通常都是使用语法糖形式了，但是还有很多资料还是会提到这种方式，而且这种方式是学习后面的方式的基础;
        2.Vue.component();
          调用Vue.component()是将刚才的组件构造器注册为一个组件，并且给它一看组件的标签名称;
          需要传递两个参数: 1.注册组件的标签名，2.组件构造器。
        3.组件必须挂载在某个Vue实例下，否则它不会生效
          第三种方式无效：是因为没有挂载在 Vue 容器里面“<div id="axx">”
     -->
  </head>

  <body>
    <div id="axx">

      <!-- 
          这种重复方法的代码，使整个页面的管理和维护不太容易 ；
          “组件”
          将一个页面拆分成一个个小的功能块，每个功能块 完成属于自己这部分独立的功能，那么之后整个页面的管理和维 护就变得非常容易了。 
      -->
      <h2> 我是本方法标题 </h2>
      <p>我是内容，本方法的内容</p>
      <p>我是内容，本方法的内容</p>

      <h2> 我是本方法标题 </h2>
      <p>我是内容，本方法的内容</p>
      <p>我是内容，本方法的内容</p>

      <h2> 我是本方法标题 </h2>
      <p>我是内容，本方法的内容</p>
      <p>我是内容，本方法的内容</p>

      <!-- 3.使用组件 -->

      <!-- 第一种方式有效 -->
      <my-cpn></my-cpn>

      <!-- 第二种方式有效 -->
      <div>
        <div>
          <my-cpn></my-cpn>
        </div>
      </div>
     

    </div>

    <!-- 第三种方式无效 -->
    <my-cpn></my-cpn>

    <script>
      /* ES6特性 ``
        ES5的时候可以使用 ''单引号和 ""双引号，
        如果换行定义使用，需要使用+号；
        ES6中提供了 `` , 在键盘Tab键位上，
        这个上漂点一样可以定义字符串，
        这个符号可以换行定义使用。        
       */
      //1.创建构造器对象 cpn - component的简写
      const cpnContructor = Vue.extend({ 
        template: `
          <div>
            <h2> 我是组件方法标题 </h2>
            <p>我是内容，我是组件输出的内容</p>
            <p>我是内容，简介好用方便维护性高</p>
          </div>
        `
      })
      
      //2.注册组件(全局组件)
      //('my-cpn', cpnContructor) 名称，和需要注册组件的构造器名
      Vue.component('my-cpn', cpnContructor)


      const axx = new Vue({
        el: "#axx",
        data: {
          message: '嘿嘿嘿'
        }
      })
    </script>
  </body>
</html>
