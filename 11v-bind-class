<!DOCTYPE html>
<html>
  <head>
    <title>v-bind-class對象語法</title>
    <script src="lib/vue.js"></script>
    <!-- 
        A - <h2 @:class="{a: isActive, l: isLine}">{{m}}</h2>
        B - <h2 class="title" @:class="{a: isActive, l: isLine}">{{m}}</h2>
        B中出現的 class="title" 這個一般用於寫死，不需要動態去更改刪除的class
        A中出現的是動態可操作的Class，B中這樣寫是合法的。

        v-on 该指令用于监听某个元素的点击事件,并且需要指定当发生点击时，
          执行方法(方法通常是 methods 中定义的方法)
        常見寫法： v-on:click ，語法糖： @click 
     -->

     <style>
         .active {
            color: red;
         }
     </style>
  </head>

  <body>
    <div id="axx">
      <!-- 普通方式
      <h2 class="active"> {{message}} </h2> -->

      <!--  vue-v-bind 語法方式
      <h2 :class="active"> {{message}} </h2> -->

      <!-- 动态绑定 class{} “{} 里面可以跟一些键值对”
      <h2 class="{key1: value1, key2: value2}">{{message}}</h2> -->

      <!-- 一般情況是用 boolean值的true，false屬性來動態的改變數據值
      <h2 v-bind:class="{類名1: true, 類名2: false}">{{message}}</h2> -->


      <!-- 代码演示 -->
      <!-- 網頁源碼現實只有一個類名 “active”,因為該屬性類型為 true 所以被顯示
      <h2 v-bind:class="{active: true, line; false}">{{message}}</h2>  -->

      <!-- 網頁源碼現實只有二個類名 “active”，“line”屬性類型為 true 所以被顯示 -->
      <h2 v-bind:class="{active: true, line: true}">{{message}}</h2>

      <!-- 如果過於複雜，可以放在一個methods或者compted中 -->
      <h2 :class="getClasses()">{{message}}</h2>

      <button @click="btnClick">按鈕</button>

    </div>
    
    <script>
      const axx = new Vue({
        el: "#axx",
        data: {
          message: '嘿嘿嘿',
          isActive: true,
          isLine: true
        },
        methods: {
          btnClick: function() {
            this.isActive =! this.isActive
          },
          getClasses: function() {
            return {active: this.isActive, line: this.isLine}
          }
        }
      })
    </script>
  </body>
</html>
